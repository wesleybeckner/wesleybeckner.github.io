I"ù<p>This visualization was created as an assignment for CSE 512 at the University of Washington. The tree is sorted vertically by total review count. Leaves are colored according to star rating (very green to less green based on d3 category20c colors) binned in increments of 1. To no surprise, Vegas had significantly more reviews than the other cities!</p>

<p>Every layer of the tree structure is sorted by total review count. This makes it fun to see, comparatively, what sorts of places are the most popular in a given city (Businesses, general vibes, and types of venues)!</p>

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Yelp Trip Planner: Top Reviews</title>
    <style>
	.node circle {
	  fill: #fff;
	  stroke: steelblue;
	  stroke-width: 3px;
	}
	.node text { font: 12px sans-serif; }
	.node {
	  cursor: pointer;
	}
	.link {
	  fill: none;
	  stroke: #ccc;
	  stroke-width: 2px;
	}
    </style>
  </head>
  <body>
<!-- load the d3.js library -->	
<script src="http://d3js.org/d3.v3.min.js"></script>
<script>
// ************** Generate the tree diagram	 *****************
var margin = {top: 20, right: 120, bottom: 20, left: 120},
	width = 1920 - margin.right - margin.left,
	height = 1000 - margin.top - margin.bottom;
var i = 0;
	duration = 750;

var tree = d3.layout.tree()
	.size([height, width]);
var diagonal = d3.svg.diagonal()
	.projection(function(d) { return [d.y, d.x]; });
var svg = d3.select("body").append("svg")
	.attr("width", width + margin.right + margin.left)
	.attr("height", height + margin.top + margin.bottom)
  	.append("g")
	.attr("transform", "translate(" + margin.left + "," + margin.top + ")");


//<!-- load the json file -->
var data;

d3.json("http://localhost:4000/assets/YALP_sauce.json", function(error, json) {
data = json;
console.log(data)
var nested_data = d3.nest()
			.key(function(d){return d.yelp;})
			.key(function(d){return d.city;})
			.key(function(d){return d.categories;})
			.key(function(d){return d.attributes;})
			.entries(data);

console.log(nested_data)
root = nested_data[0];
root.x0 = height / 2;
root.y0 = 0;

var citycount = d3.nest()
			.key(function(d){return d.yelp;})
			.key(function(d){return d.city;})
			.rollup(function(leaves) { return {"city_review": d3.sum(leaves,
				function(d) {return d.review_count;})}})
			.entries(data);
console.log(citycount)

  function collapse(d) {
    if (d.values) {
      d._values = d.values;
      d._values.forEach(collapse);
      d.values = null;
    }
  }

  root.values.forEach(collapse);

update(root);
});

function update(source) {


  // Compute the new tree layout.
  var nodes = tree.nodes(root).reverse(),
	  links = tree.links(nodes);
	  children = tree.children(function(d) {return d.values;}) 

  // Normalize for fixed-depth.
  nodes.forEach(function(d) { d.y = d.depth * 180; });

  // Update the nodes‚Ä¶
  var node = svg.selectAll("g.node")
	  .data(nodes, function(d) { return d.id || (d.id = ++i); })

  // Enter any new nodes at the parent's previous position.
  var nodeEnter = node.enter().append("g")
	  .attr("class", "node")
	  .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
	  .on("click", click);

  nodeEnter.append("circle")
	  .attr("r", 1e-6)
	  .style("fill", function(d) { return d._values ? "lightsteelblue" : "#fff"; });

  nodeEnter.append("text")
	  .attr("x", function(d) { return d.values || d._values ? -13 : 13; })
	  .attr("dy", ".35em")
	  .attr("text-anchor", function(d) { return d.values || d._values ? "end" : "start"; })
	  .text(function(d) { if (d.key) {return d.key;} else { return d.name;} })
	  .attr("data-legend", function(d){ if (d.key) {return d.key;} else { return d.name;} }) 
	  .style("fill-opacity", 1e-6);


  // Transition nodes to their new position.
  var nodeUpdate = node.transition()
	  .duration(duration)
	  .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });

  nodeUpdate.select("circle")
	  .attr("r", function(d) {if (d.review_count) {return Math.sqrt(d.review_count/3.14)*0.8;} else{ return 10;}})
	  .style("fill", function(d) { return d._values ? "lightsteelblue" : "#fff"; })
	  .style("stroke", function(d) {if (d.stars === 5) {return "#31a354";} else if (d.stars
		=== 4) {return "#74c476";} else if (d.stars === 3) {return "#a1d99b";} else if 
		(d.stars === 2) {return "#fd8d3c";} else if (d.stars === 1) {return
		"#e6550d";} else {return "steelblue";}});

  nodeUpdate.select("text")
	  .style("fill-opacity", 1)
	  .attr("x", function(d) {if (d.review_count) {return Math.sqrt(d.review_count/3.14)*2+13;} else { return d.values || d._values ? -13 : 13; } }  );
 

  // Transition exiting nodes to the parent's new position.
  var nodeExit = node.exit().transition()
	  .duration(duration)
	  .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
	  .remove();

  nodeExit.select("circle")
	  .attr("r", 1e-6);

  nodeExit.select("text")
	  .style("fill-opacity", 1e-6);

  // Update the links‚Ä¶
  var link = svg.selectAll("path.link")
	  .data(links, function(d) { return d.target.id; });

  // Enter any new links at the parent's previous position.
  link.enter().insert("path", "g")
	  .attr("class", "link")
	  .attr("d", function(d) {
		var o = {x: source.x0, y: source.y0};
		return diagonal({source: o, target: o});
	  });

  // Transition links to their new position.
  link.transition()
	  .duration(duration)
	  .attr("d", diagonal);

  // Transition exiting nodes to the parent's new position.
  link.exit().transition()
	  .duration(duration)
	  .attr("d", function(d) {
		var o = {x: source.x, y: source.y};
		return diagonal({source: o, target: o});
	  })
	  .remove();

  // Stash the old positions for transition.
  nodes.forEach(function(d) {
	d.x0 = d.x;
	d.y0 = d.y;
  });
}

// Toggle values on click.
function click(d) {
  if (d.values) {
	d._values = d.values;
	d.values = null;
  } else {
	d.values = d._values;
	d._values = null;
  }
  update(d);
}

</script>
	
  </body>
</html>

:ET